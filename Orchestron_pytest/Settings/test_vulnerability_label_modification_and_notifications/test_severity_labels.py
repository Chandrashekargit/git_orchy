import time
from pytest import mark
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from xpath.settings_module_xpath import *
from selenium.common.exceptions import *


@mark.severity_labels
class SeverityLabelFieldsWithDifferentInputsTests:
    @mark.parametrize('v1, v2, v3, v4', [
        ('/////1////', '@@@@@@.@@@', '!!!!!!!u!!', '$$$$s$$$$$'),
        ('1@!', '(2)', '3.23', '4i+1j'),
        ('HIGH', 'HIGH', 'HIGH', 'HIGH'),
        ('H', 'M', 'L', 'I'),
        ('High', 'Medium', 'Low', 'Info')
    ])
    def test_severity_label_fields_with_different_inputs(self, driver, v1, v2, v3, v4):
        wait = WebDriverWait(driver, 10, poll_frequency=1)
        settingstab = wait.until(EC.element_to_be_clickable((By.XPATH, settings_tab)))
        driver.execute_script("arguments[0].click();", settingstab)

        vul_label_section = wait.until(EC.element_to_be_clickable((By.XPATH, vul_label_modification_and_notification)))
        vul_label_section.click()

        sev_label = wait.until(EC.element_to_be_clickable((By.XPATH, severity_labels)))
        sev_label.click()

        high_sev = wait.until(EC.element_to_be_clickable((By.XPATH, high)))
        high_sev.clear()
        high_sev.send_keys(v1)

        med_sev = wait.until(EC.element_to_be_clickable((By.XPATH, medium)))
        med_sev.clear()
        med_sev.send_keys(v2)

        low_sev = wait.until(EC.element_to_be_clickable((By.XPATH, low)))
        low_sev.clear()
        low_sev.send_keys(v3)

        info_sev = wait.until(EC.element_to_be_clickable((By.XPATH, info)))
        info_sev.clear()
        info_sev.send_keys(v4)

        try:
            warning_msg = WebDriverWait(driver, 3, poll_frequency=1).until(
                EC.element_to_be_clickable((By.XPATH, warning_message))).text
            assert warning_msg == "* Ensure this field has no more than 10 characters."
            submit_btn = WebDriverWait(driver, 3, poll_frequency=1).until(
                EC.element_to_be_clickable((By.XPATH, severity_labels_submit)))
            submit_btn.click()
        except:
            submit_btn = WebDriverWait(driver, 3, poll_frequency=1).until(
                EC.element_to_be_clickable((By.XPATH, severity_labels_submit)))
            submit_btn.click()

    @mark.parametrize('v1, v2, v3, v4', [
        (' ', ' ', ' ', ' '),
        (' ', 'Medium', 'Low', 'Info'),
        ('High', ' ', 'Low', 'Info'),
        ('High', 'Medium', ' ', 'Info'),
        ('High', 'Medium', 'Low', ' ')
    ])
    def test_severity_label_fields_with_empty_space_inputs(self, driver, v1, v2, v3, v4):
        wait = WebDriverWait(driver, 10, poll_frequency=1)
        settingstab = wait.until(EC.element_to_be_clickable((By.XPATH, settings_tab)))
        driver.execute_script("arguments[0].click();", settingstab)

        vul_label_section = wait.until(EC.element_to_be_clickable((By.XPATH, vul_label_modification_and_notification)))
        vul_label_section.click()

        sev_label = wait.until(EC.element_to_be_clickable((By.XPATH, severity_labels)))
        sev_label.click()

        high_sev = wait.until(EC.element_to_be_clickable((By.XPATH, high)))
        high_sev.clear()
        high_sev.send_keys(v1)

        med_sev = wait.until(EC.element_to_be_clickable((By.XPATH, medium)))
        med_sev.clear()
        med_sev.send_keys(v2)

        low_sev = wait.until(EC.element_to_be_clickable((By.XPATH, low)))
        low_sev.clear()
        low_sev.send_keys(v3)

        info_sev = wait.until(EC.element_to_be_clickable((By.XPATH, info)))
        info_sev.clear()
        info_sev.send_keys(v4)

        submit_btn = WebDriverWait(driver, 3, poll_frequency=1).until(
            EC.element_to_be_clickable((By.XPATH, severity_labels_submit)))
        submit_btn.click()

        warnign_msg = WebDriverWait(driver, 3, poll_frequency=1).until(
            EC.element_to_be_clickable((By.XPATH, "//p[contains(text(), ' * This field may not be blank.')]"))).text
        assert warnign_msg == "* This field may not be blank."

    def test_notification_btn_enable_disable(self, driver):
        wait = WebDriverWait(driver, 10, poll_frequency=1)
        settingstab = wait.until(EC.element_to_be_clickable((By.XPATH, settings_tab)))
        driver.execute_script("arguments[0].click();", settingstab)

        vul_label_section = wait.until(EC.element_to_be_clickable((By.XPATH, vul_label_modification_and_notification)))
        vul_label_section.click()

        notification_section = wait.until(EC.element_to_be_clickable((By.XPATH, notification)))
        notification_section.click()

        app_noti_tg_btn = wait.until(EC.element_to_be_clickable((By.XPATH, application_notification)))
        app_noti_tg_btn.click()
        time.sleep(1)
        app_noti_tg_btn.click()
        time.sleep(1)

        eng_noti_tg_btn = wait.until(EC.element_to_be_clickable((By.XPATH, engagement_notification)))
        eng_noti_tg_btn.click()
        time.sleep(1)
        eng_noti_tg_btn.click()
        time.sleep(1)
        driver.execute_script("window.scrollTo(0, 900)")

        scan_noti_tg_btn = wait.until(EC.element_to_be_clickable((By.XPATH, scan_notification)))
        scan_noti_tg_btn.click()
        time.sleep(1)
        scan_noti_tg_btn.click()
        time.sleep(1)
        driver.execute_script("window.scrollTo(0, 900)")

        users_noti_tg_btn = wait.until(EC.element_to_be_clickable((By.XPATH, users_notification)))
        users_noti_tg_btn.click()
        time.sleep(1)
        users_noti_tg_btn.click()
        time.sleep(1)
        driver.execute_script("window.scrollTo(0, 900)")

        teams_noti_tg_btn = wait.until(EC.element_to_be_clickable((By.XPATH, teams_notification)))
        teams_noti_tg_btn.click()
        time.sleep(1)
        teams_noti_tg_btn.click()
        time.sleep(1)

