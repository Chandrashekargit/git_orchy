[pytest]
python_files = test_*
python_functions = test_*
python_classes = *Tests

markers =
    smoke: Functions associated with these markers are most important features of orchestron which needs to work at any cost.
            [login, create apps]
    smoke1: Functions associated with these markers are most important features of orchestron which needs to work at any cost.
            (executive 'smoke1' once after 'smoke' test-cases are executed) [uploads results, crud operations of engagement(create, update, delete)]
    login: These marker enables to login into the application
    create_apps: creates application
    sast: uploads all sast results
    dast: uploads all dast results
    sca: uploads all sca results
    crud_eng: creates an engagement
    assign_scans: assigns the scans in individual engagement
    unassign_scans: unassigns the assigned scans
    update_eng: lets user to update the engagements info
    view_exec_report: lets us see the report of individual engagement
    delete_apps: lets us delete the applications
    close_eng: lets us manually close the engagement
    delete_eng: lets us delete the individual engagement
    run: it helps us to run the test-cases according to the order given to them
    manual_entry: lets us manually feed the results
    upload_result: lets us upload the scans from different security tools
    correlation: checks if correlation is happening (Basic)
    create_users: it lets us create the normal users.
    delete_user: these function deletes the user
    create_app_positive_tc: lets us check the 'create application' positive test-cases for boundary value analysis
    create_app_negative_tc: lets us check the 'create application' negative test-cases for boundary value analysis and checks the error message
    engagement_boundary_value_analysis_positive: lets us check the 'create Engagement' feature positive test-cases for boundary value analysis
    engagement_boundary_value_analysis_negative: lets us check the 'create Engagement' feature positive test-cases for boundary value analysis and checks the error message
    upload_results: lets us upload the results
    closed_vul: checks for remediation info and stuff
    give_name_of_all_vulnerabilities: gives us all the names of SAST, DAST. SCA categories
    give_data_of_individual_vulnerabilities: gives us whole info of individual vulnerable of SAST, DAST. SCA categories
    close_all_vulnerabilities: it lets us close all the vulnerabilities of any give applicaton xpath
    reopen_no_remedi_info: it reopens the vulnerabilities
    create_team: It lets us create, update and delete team
    test_domain: lets us check the positive and negative TC on domain section
    severity_labels: lets us test the severity labels and the warning message
    update_app_and_check_all_warning_msgs: It lets us check all the warning messages while updating the application.
    create_manual_vul: These function lets us create the vulnerable manually
    forgot_pw: it lets us check the 'Forgot password' feature
    profile: it lets us check all the warning messages with firstname, lastname, email along with positive test_cases.
    change_pw: it lets us check if admin/normal user is able to see all the rules and change the pw accordingly.
    create_users: lets us test all the warning message of create users feature.
    close_all_vul: closes all the vulnerabilities of the individual application
    check_remediation_info: Checks if all the vulnerabilities have remediation info.
    check_for_detailed_evd: if any affected evidence param is 'Detailed Evidence' than it catches those affected
                            instance prints on console.
    close_evidence: Closes all the evidences of all the vulnerabilities under any given application
    create_eng: it lets us create the engagement
    assign_unassign_scans: lets us assign and unassign the scans
    create_manual_evd: creates manual evdiences
    warning_msg_of_user_section: checks all the warning msgs of users section
    normal_user: lets us create normal user and assert the warning msgs for 'create team' button
    warning_msgs_for_sca: lets us check all the warning msgs of sca evidence section
    warning_msgs_for_dast: lets us check all the warning msgs of dast evidence section
    warning_msgs_for_sast: lets us check all the warning msgs of sast evidence section
    wrng_msg_for_manual_vul: lets us check all the warning msgs of creation of manual vulnerability
    wrng_msg_for_upload_scans: checks for all the warning msgs of upload_scans feature
    test_user: v
    mark_all_ai_as_fp: checks when all ai marked as FP, vul should move to FP section
    all_ai_closed: checks when all ai is closed, vul should move to closed vul section
    TP: checks if any one of the evidence marked as True Positive(TP) then vul should move to TP section/open vulnerability
    reopen_evd: checks if any one of the evidence reopened vul should move to open vulnerability
    mark_vul_as_FP_via_ba: checks if we are able to mark all vuls as FP via bulk actions
    perpage: it lets us check the 'number of vuls' matches the option selected under perpage dropdown
    check_dast_ai_when_bt_is_dast: checks if all the affected instances belong to DAST tools
    check_sast_ai_when_bt_is_sast: checks if all the affected instances belong to SAST tools
    check_sca_ai_when_bt_is_sca: checks if all the affected instances belong to SCA tools
    check_manual_ai_when_bt_is_manual: checks if all the affected instances belong to Manual type
